runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
library(dplyr)
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
as.POSIXct('11:05')
temp_string <- 'Zoom.zip\Zoom\2020-11-09 10.33.14 My Meeting 94135010620 - ZIP archive, unpacked size 624,465 bytes'
temp_string <- 'Zoom.zip/Zoom/2020-11-09 10.33.14 My Meeting 94135010620
temp_string <- 'Zoom.zip/Zoom/2020-11-09 10.33.14 My Meeting 94135010620'
as.Date(stringi::stri_extract(temp_string, "[0-9]{4}-[0-9]{2}-[0-9]{2}"))
library(stringi)
as.Date(stri_extract(temp_string, "[0-9]{4}-[0-9]{2}-[0-9]{2}"))
as.Date(stri_extract(temp_string, "[0-9]{4}-[0-9]{2}-[0-9]{2}"), format="%Y-%m-%d")
as.Date(stri_extract(temp_string, "\\d{4}-\\d{2}-\\d{2}"), format="%Y-%m-%d")
as.Date(str_extract(temp_string, "\\d{4}-\\d{2}-\\d{2}"), format="%Y-%m-%d")
library(stringr)
as.Date(str_extract(temp_string, "\\d{4}-\\d{2}-\\d{2}"), format="%Y-%m-%d")
# Extract date from file name
path <-'Zoom.zip/Zoom/2020-11-09 10.33.14 My Meeting 94135010620'
date <- as.Date(str_extract(path, "\\d{4}-\\d{2}-\\d{2}"), format="%Y-%m-%d")
x$date <- as.POSIXct(paste(date, x$time, sep = " "))
as.POSIXct(date, '11:05')
strptime(paste(date, '11:05:05'), format="%Y-%m-%d %H:%M:%S", tz="UTC")
runApp('R Projects/zoom_data')
# Extract date from file name
path <-'C:/Users/Shadow/Desktop/Zoom/2020-11-09 10.33.14 My Meeting 94135010620/meeting_saved_chat.txt'
date <- as.Date(str_extract(path, "\\d{4}-\\d{2}-\\d{2}"), format="%Y-%m-%d")
date
strptime(paste(date, '11:05:05'), format="%Y-%m-%d %H:%M:%S", tz="UTC")
typeof(strptime(paste(date, '11:05:05'), format="%Y-%m-%d %H:%M:%S", tz="UTC"))
library(dygraphs)
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
path_to_data <-"~/R Projects/zoom_data/2020-11-19 07.35.46 MAP Make Up 97465232618/meeting_saved_chat.txt"
# #
x <- read.csv(path_to_data, header = FALSE, sep = "\t", stringsAsFactors = TRUE, row.names = NULL)
x
render_transcript <- function(df){
# Get date from folder's label
#date <- sub(".{0,}([0-9]{4}-[0-9]{1,2}-[0-9]{1,2}).{0,}", "\\1", path)
#file_string <-readr::read_file(path)
df <- data.frame(df)
# Hard fix: only 1 column exists for some reason when run through R Shiny
df$message <- df[,1]
colnames(df) <- c('time', 'message')
df$time <- as.character(df$time)
df$message <- as.character(df$message)
df$time <- sub("? From .*","", df$time)
df$sender <- sub(".*?From","", df$message)
df$sender <- sub("? to .*","", df$sender) # This breaks it; sub is only first occurence... or not? only recipient is broken.
df$sender <- sub("?:.*","", df$sender)
df$sender <- stringr::str_trim(df$sender)
df$recipient <- sub(".*? to ","", df$message)
df$recipient <- sub("\\(Privately).*","", df$recipient)
df$recipient <- stringr::str_trim(df$recipient)
# Fix recipient when string does not have 'to' before message
for(i in 1:nrow(df)){
temp <- sub(".*?From","", df$message[i])
temp <- sub(":.*", "", temp)
if(grepl(' to ', temp)==FALSE){
df$recipient[i] <- "Public"
}
}
# Fix logs
for(i in 1:nrow(df)){
if(i>1){
if(!grepl("[A-Za-z]", df$time[i]) & df$time[i]!="" ){
last_entry <- i
}else{
df$message[last_entry]<- paste(df$message[last_entry], df$time[i], sep = ' ')
}
}
}
# Remove non-valid entries
df <- df[!grepl("[A-Za-z]", df$time) & df$time!="",]
# Remove excessive white space and new lines
df$message <- gsub("\\s+", " ",df$message)
# Keep only after colon
df$message <- sub(".*?From","", df$message)
df$message <- sub(".*?:", "", df$message)
# Reorganize columns
df <- df[, c(1, 3, 4, 2)]
return(df)
}
render_data <- function(x){
x <- render_transcript(x)
x$nrow <- seq.int(nrow(x))
temp_first_msg <- x[match(unique(x$sender), x$sender), ]
colnames(temp_first_msg) <- c(
'first_message', 'sender', 'recipient', 'message', 'nrow')
temp_first_msg <- subset(temp_first_msg, select=c('first_message', 'sender'))
x <- merge(x, temp_first_msg)
x <- data.frame(x)
# Reset order
x <- x[order(x$nrow, decreasing = FALSE),]
#colnames(temp_first_msg) <- c('last_message', 'sender')
#x <- x[order(as.numeric(row.names(x)), decreasing = T),]
#x <- x%>%
#     arrange(desc(row_number()))
#x <- x %>% arrange(desc(row_number()))
#x<-rev(x, 1)
x<- x[seq(dim(x)[1],1),]
temp_last_msg <- x[match(unique(x$sender), x$sender), ]
colnames(temp_last_msg) <- c(
'sender', 'last_message', 'recipient', 'message', 'nrow', 'first_message')
temp_last_msg <- subset(temp_last_msg, select=c('last_message', 'sender'))
x <- merge(x, temp_last_msg)
x <- x[order(x$nrow, decreasing = FALSE),]
x <- subset(x, select=-c(nrow))
# Reset order
x <- x[,c(2, 1, 3, 4, 5, 6)]
# Get total count
count <- data.frame(table(x$sender))
colnames(count) <- c('sender', 'total_sent')
x <- merge(x, count)
return(x)
}
# Render tables
create_dt <- function(x, title){
require(DT)
# Set table page length
if(nrow(x)>100){
page_length <- round(nrow(x)/3, digits = 0)
} else{
page_length <- nrow(x)
}
# Render table
DT::datatable(x,
caption = htmltools::tags$caption(
style = 'caption-side: top; text-align: center; color:black; font-size:200% ;',
title),
extensions = 'Buttons',
options = list(dom = 'Bfrtip',
scrollY=300,
buttons = c(
'pageLength', 'copy', 'csv', 'excel', 'pdf', 'print'),
pageLength=page_length,
scrollX=TRUE,
lengthMenu = list(c(10,25,50,-1),
c(10,25,50,"All"))),
rownames = FALSE)
}
# Render dygraphs
render_dygraph <- function(x, path){
require(dygraphs)
require(dplyr)
require(xts)
# Extract date from file name
#path <-'C:/Users/Shadow/Desktop/Zoom/2020-11-09 10.33.14 My Meeting 94135010620/meeting_saved_chat.txt'
date <- as.Date(str_extract(path, "\\d{4}-\\d{2}-\\d{2}"), format="%Y-%m-%d")
#x$date <- as.POSIXct(paste(date, x$time, sep = " "))
#x$date <- strptime(paste(date, x$time, sep = " "), format="%Y-%m-%d %H:%M:%S", tz="UTC")
x$date <- paste(date, x$time, sep=" ")
# expects a string below?
# Get test date data
temp <- data.frame(table(x$date))
# Get count for each unique date
temp <- rename(temp, date=Var1, count=Freq)
# Convert strings into xts object for dygraphs
temp <- temp %>%
mutate(date = as.Date(date)) %>%
as.xts(order.by = .$date)
# Render dygraph
dygraph(temp, main="Chat activity")%>%
dyRangeSelector()%>%
dyBarChart()%>%
dyAxis(name = 'x', rangePad = 10)
}
render_data(temp)
render_data(x)
x
render_transcript(x)
temp_transcript <- render_transcript(x)
View(temp_transcript)
runApp('R Projects/zoom_data')
x <- read.csv(path_to_data, header = FALSE, sep = "\n", stringsAsFactors = TRUE, row.names = NULL)
x <- readr::read_lines(path_to_data)
temp_transcript <- render_transcript(x)
View(temp_transcript)
temp_data <- render_data(x)
View(temp_data)
library(dygraphs)
library(xts)
library(dplyr)
path <- path_to_data
path
# Extract date from file name
#path <-'C:/Users/Shadow/Desktop/Zoom/2020-11-09 10.33.14 My Meeting 94135010620/meeting_saved_chat.txt'
date <- as.Date(str_extract(path, "\\d{4}-\\d{2}-\\d{2}"), format="%Y-%m-%d")
date
x <- temp_data
#x$date <- as.POSIXct(paste(date, x$time, sep = " "))
#x$date <- strptime(paste(date, x$time, sep = " "), format="%Y-%m-%d %H:%M:%S", tz="UTC")
x$date <- paste(date, x$time, sep=" ")
x$date
as.Date(x$time)
gsub("[\t", "", x$date)
gsub("[\n\t", "", x$date)
gsub("[\t]", "", x$date)
x$date <- gsub("[\n\t", "", x$date)
x$date <- gsub("[\t", "", x$date)
x$date <- gsub("[\t]", "", x$date)
x$date
# Get test date data
temp <- data.frame(table(x$date))
temp
as.POSIXct(x$date)
lubridate::as.period(x$date, unit="minutes")
lubridate::as.period(as.POSIXct(x$date), unit="minutes")
round.Date(as.POSIXct(x$date))
round.Date(x$date)
x$date <- as.POSIXct(x$date)
x$date
round.Date(x$date)
round.Date(x$date, unit ='5 minutes')
lubridate::round_date(x$date)
lubridate::round_date(x$date, unit='5 minutes')
x$date <- lubridate::round_date(x$date, unit='5 minutes')
# Get test date data
temp <- data.frame(table(x$date)) # all ones all the wau down.....
temp
# Get count for each unique date
temp <- rename(temp, date=Var1, count=Freq)
temp$date
temp$count
# Convert strings into xts object for dygraphs
temp <- temp %>%
mutate(date = as.Date(date)) %>%
as.xts(order.by = .$date)
# Render dygraph
dygraph(temp, main="Chat activity")%>%
dyRangeSelector()%>%
dyBarChart()%>%
dyAxis(name = 'x', rangePad = 10)
# Render dygraph
dygraph(temp, main="Chat activity")%>%
dyRangeSelector()%>%
dyBarChart()
# Render dygraph
dygraph(temp, main="Chat activity")%>%
dyRangeSelector()
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp()
runApp()
runApp('R Projects/zoom_data')
runApp()
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
library(plotly)
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
shiny::runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
runApp('R Projects/zoom_data')
shiny::runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp()
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp()
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp()
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
Sys.Date()
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
Sys.Date()
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
runApp('R Projects/Zoom-chat-data-dashboard/zoom_data')
rsconnect::deployApp()
setwd("~/R Projects/Zoom-chat-data-dashboard/zoom_data")
rsconnect::deployApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
shiny::runApp()
runApp()
runApp()
rsconnect::deployApp()
